import java.io.OutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.PrintStream;
import java.io.InputStream;
 
/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
    public static void main(String[] args) {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        FastReader in = new FastReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        FlipAB solver = new FlipAB();
        int testCount = Integer.parseInt(in.next());
        for (int i = 1; i <= testCount; i++)
            solver.solve(i, in, out);
        out.close();
    }
 
    static class FlipAB {
        int N;
        int M;
        char[][] G1;
        char[][] G2;
 
        public void fillInputParams(FastReader in) {
            N = in.nextInt();
            M = in.nextInt();
            G1 = new char[N][];
            for (int i = 0; i < N; ++i) G1[i] = in.next().toCharArray();
            G2 = new char[N][];
            for (int i = 0; i < N; ++i) G2[i] = in.next().toCharArray();
        }
 
        void sort(char[][] G) {
            for (int i = 0; i < N; ++i) if (G[i][0] == 'B') flipRow(G, i);
            for (int j = 0; j < M; ++j) if (G[0][j] == 'B') flipCol(G, j);
        }
 
        void flipRow(char[][] g, int row) {
            for (int j = 0; j < M; ++j) g[row][j] = (char) ('B' - g[row][j] + 'A');
        }
 
        void flipCol(char[][] g, int col) {
            for (int i = 0; i < N; ++i) g[i][col] = (char) ('B' - g[i][col] + 'A');
        }
 
        Object solveOptimised(FastReader in, StringBuilder sb) {
            sort(G1);
            sort(G2);
 
            for (int i = 0; i < N; ++i) for (int j = 0; j < M; ++j) if (G1[i][j] != G2[i][j]) return "NO";
            return "YES";
        }
 
        Object solveBrute(FastReader in, StringBuilder sb) {
            return null;
        }
 
        public void solve(int testNumber, FastReader in, PrintWriter out) {
            // out.print("Case #" + testNumber + ": ");
 
            fillInputParams(in);
            Object outOptimised = solveOptimised(in, new StringBuilder());
            Object outBrute = solveBrute(in, new StringBuilder());
            if (outBrute == null) {
                out.println(outOptimised);
            } else if (outBrute.toString().equals(outOptimised.toString())) {
                System.err.println(testNumber + ". OK Checked");
            } else {
                // print input params
                System.err.println("Actual = " + outOptimised);
                System.err.println("Expected = " + outBrute);
                System.err.println();
                throw new ArithmeticException();
            }
        }
 
    }
 
    static class FastReader {
        static final int BUFSIZE = 1 << 20;
        static byte[] buf;
        static int index;
        static int total;
        static InputStream in;
 
        public FastReader(InputStream is) {
            try {
                in = is;
                buf = new byte[BUFSIZE];
            } catch (Exception e) {
            }
        }
 
        private int scan() {
            try {
                if (index >= total) {
                    index = 0;
                    total = in.read(buf);
                    if (total <= 0)
                        return -1;
                }
                return buf[index++];
            } catch (Exception | Error e) {
                System.err.println(e.getMessage());
                return 13 / 0;
            }
        }
 
        public String next() {
            int c;
            for (c = scan(); c <= 32; c = scan()) ;
            StringBuilder sb = new StringBuilder();
            for (; c > 32; c = scan())
                sb.append((char) c);
            return sb.toString();
        }
 
        public int nextInt() {
            int c, val = 0;
            for (c = scan(); c <= 32; c = scan()) ;
            boolean neg = c == '-';
            if (c == '-' || c == '+')
                c = scan();
            for (; c >= '0' && c <= '9'; c = scan())
                val = (val << 3) + (val << 1) + (c & 15);
            return neg ? -val : val;
        }
 
    }
}
